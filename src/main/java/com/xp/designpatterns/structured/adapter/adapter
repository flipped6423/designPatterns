适配器模式：
适配器模式是一种结构型设计模式，主要目的是通过一个中间接口或类，将原本由于接口不兼容而无法在一起工作的类连接起来，从而使他们可以协同工作

核心思想：将一个类的接口转换为客户端希望的另一个接口

主要解决的问题：
1.客户端代码无法直接使用现有的类，因为接口不兼容
2.使用适配器，将不兼容的接口转为兼容的接口

包含的角色：
目标接口：客户端希望使用的接口
被适配者：需要被适配的现有接口或类
适配者：实现目标接口，并通过内部的逻辑将请求转换为适配者接口的调用

例如：假设你有一个新的手机，它使用的是USB-C接口，但是你家里只有老式的USB-A充电器
目标接口：手机的USB-C充电口
被适配者：家里的USB-A充电器
适配者：USB-A转USB-C转换线/转换

优点：
1.兼容性
2.灵活性和扩展性
3.解耦

缺点：
若过度使用，可能会导致代码结构混乱，增加系统的复杂度

应用场景： 需要整合老系统代码或第三方库时
1.接口不兼容的系统集成
2.封装遗留代码
3.第三方库的兼容

实现方式：
1.类适配器：【继承】方式
适配器即实现目标接口，又继承适配者类，将适配者的功能转换为目标接口的功能
2.对象适配器：【组合】方式
适配器内部持有适配者的实例，适配器实现目标接口，然后通过调用适配者对象的方法完成适配

适配器模式与代理模式的区别：
两者都是属于【结构性】设计模式，并且都通过组合/继承的形式达到目的，但是使用场景不同
适配器模式：系统整合、第三方兼容
代理模式：日志记录，权限控制等

适配器关注的是接口兼容性，代理模式关注的是访问控制或功能增强问题

适配器模式与桥接模式的区别：
都属于【结构性】设计模式
适配器模式关注的是接口兼容性问题，而桥接模式关注的是抽象与实现的耦合性问题