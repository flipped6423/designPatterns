模板方法：
模板方法是一种行为型设计模式，它定义了一个包含一系列操作的模板方法，把模板中特定的操作留给子类来实现，
并允许子类在不改变模板总体结构的情况下重新定义模板中的某些步骤

两个概念：
1.模板方法：
模板设计模式有一个抽象类，该抽象类定义了一个模板方法，它包含了一系列的基本操作方法，其中有一些子方法是抽象的，具体留给子类实现

2.具体实现
子类继承抽象类，并重写模板方法中调用的抽象方法，这样如果我们有多个实现类，业务流程相同，但是某一些细节不同，只需要继承抽象类并实现特定的抽象方法即可


优点：
1.代码复用
2.可扩展性
把通用的步骤提取出来，剩下的通过抽象方法留给各种子类来实现，这样做提高了代码的可扩展性

缺点：
1.限制了灵活性：
在抽象类中已经定义了一系列操作的模板骨架，限制了子类的行为，子类在继承时就必须遵循这个骨架，一旦抽象类有变动就违反了开闭原则
2.违反开闭原则
3.导致类的数量增多
模板方法模式中，每一个不同的实现都需要一个新的子类，可能导致类的数量急剧增加，导致类膨胀，增加系统的复杂性

在JDK中的应用：
1.集合
如AbstractList、AbstractMap这些集合抽象类，这些抽象类中定义了操作的算法，如迭代元素、添加元素、删除元素等
具体的实现细节留给子类，如ArrayList、HashMap
2.Servlet
HttpServlet类在JAVA中用于创建Servlet请求，提供完整的出来Http请求的方法，如doGet、doPost这些都是模板方法的一个步骤
真正的模板方法是HttpServlet中的service方法，定义了HTTP请求的模板，根据请求类型调用相应的doGet、doPost方法

在Spring中的应用
1.事务管理器
2.模板工具类：如JDBCTemplate